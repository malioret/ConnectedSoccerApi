<?php

namespace Proxies\__CG__\Soccer\EventBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \Soccer\EventBundle\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'nom', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'date', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'dateCreation', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isGenerated', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isValidate', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isFinished', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'nombreJoueurs', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'matchs', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'amis', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'teams', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'admin', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'terrain', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'type', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'commentaires');
        }

        return array('__isInitialized__', 'id', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'nom', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'date', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'dateCreation', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isGenerated', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isValidate', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'isFinished', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'nombreJoueurs', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'matchs', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'amis', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'teams', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'admin', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'terrain', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'type', '' . "\0" . 'Soccer\\EventBundle\\Entity\\Event' . "\0" . 'commentaires');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addMatch(\Soccer\TeamBundle\Entity\Match $match)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMatch', array($match));

        return parent::addMatch($match);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMatch(\Soccer\TeamBundle\Entity\Match $match)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMatch', array($match));

        return parent::removeMatch($match);
    }

    /**
     * {@inheritDoc}
     */
    public function getMatchs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMatchs', array());

        return parent::getMatchs();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsFinished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsFinished', array());

        return parent::getIsFinished();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsFinished($isFinished)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsFinished', array($isFinished));

        return parent::setIsFinished($isFinished);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function addAmi(\Soccer\EventBundle\Entity\UserEvent $ami)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAmi', array($ami));

        return parent::addAmi($ami);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAmi(\Soccer\EventBundle\Entity\UserEvent $ami)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAmi', array($ami));

        return parent::removeAmi($ami);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmis', array());

        return parent::getAmis();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeam(\Soccer\TeamBundle\Entity\Team $team)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeam', array($team));

        return parent::addTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeam(\Soccer\TeamBundle\Entity\Team $team)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeam', array($team));

        return parent::removeTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeams()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeams', array());

        return parent::getTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function setNombreJoueurs($nombreJoueurs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNombreJoueurs', array($nombreJoueurs));

        return parent::setNombreJoueurs($nombreJoueurs);
    }

    /**
     * {@inheritDoc}
     */
    public function getNombreJoueurs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNombreJoueurs', array());

        return parent::getNombreJoueurs();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreation($dateCreation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreation', array($dateCreation));

        return parent::setDateCreation($dateCreation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreation', array());

        return parent::getDateCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsGenerated($isGenerated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsGenerated', array($isGenerated));

        return parent::setIsGenerated($isGenerated);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsGenerated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsGenerated', array());

        return parent::getIsGenerated();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsValidate($isValidate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsValidate', array($isValidate));

        return parent::setIsValidate($isValidate);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsValidate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsValidate', array());

        return parent::getIsValidate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdmin(\Soccer\UserBundle\Entity\User $admin = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdmin', array($admin));

        return parent::setAdmin($admin);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdmin', array());

        return parent::getAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setTerrain(\Soccer\EventBundle\Entity\Terrain $terrain)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTerrain', array($terrain));

        return parent::setTerrain($terrain);
    }

    /**
     * {@inheritDoc}
     */
    public function getTerrain()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTerrain', array());

        return parent::getTerrain();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\Soccer\EventBundle\Entity\TypeEvent $type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function addCommentaire(\Soccer\CommentBundle\Entity\Commentaire $commentaire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCommentaire', array($commentaire));

        return parent::addCommentaire($commentaire);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCommentaire(\Soccer\CommentBundle\Entity\Commentaire $commentaire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCommentaire', array($commentaire));

        return parent::removeCommentaire($commentaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentaires()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentaires', array());

        return parent::getCommentaires();
    }

}
